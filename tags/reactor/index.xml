<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reactor on A guy with &#39;Ego&#39; in his name</title>
    <link>https://bsideup.github.io/tags/reactor/</link>
    <description>Recent content in Reactor on A guy with &#39;Ego&#39; in his name</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Jun 2020 10:22:38 +0200</lastBuildDate>
    
	<atom:link href="https://bsideup.github.io/tags/reactor/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Daily Reactive: Context loss detection in Project Reactor</title>
      <link>https://bsideup.github.io/posts/daily_reactive/context_loss_detection/</link>
      <pubDate>Wed, 10 Jun 2020 10:22:38 +0200</pubDate>
      
      <guid>https://bsideup.github.io/posts/daily_reactive/context_loss_detection/</guid>
      <description>This post is a part of the &amp;ldquo;Daily Reactive&amp;rdquo; series of short posts about common situations with Project Reactor and Reactive Programming.
 One of the unique features of Project Reactor is the Context support. It allows you to associate an immutable context (represented by key/value pairs) and pass it to the upstream subscribers:
public Flux&amp;lt;Item&amp;gt; getItems() { return Flux.deferWithContext(context -&amp;gt; { String userId = context.get(&amp;#34;userId&amp;#34;); Publisher&amp;lt;Item&amp;gt; items = fetchItemsByUserId(userId); return items; }); } public void streamItems() { getItems().</description>
    </item>
    
    <item>
      <title>Daily Reactive: Let&#39;s talk about ThreadLocals.</title>
      <link>https://bsideup.github.io/posts/daily_reactive/thread_locals/</link>
      <pubDate>Wed, 12 Feb 2020 13:44:18 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/daily_reactive/thread_locals/</guid>
      <description>This post is a part of the &amp;ldquo;Daily Reactive&amp;rdquo; series of short posts about common situations with Project Reactor and Reactive Programming.
 ThreadLocals is one of the most common pain points topics nobody wants to talk about in the reactive world. Unlike in synchronous programming, asynchronous programming makes them hard to use due to a lot of context switching and thread pooling.
Consider the following example:
static final ThreadLocal&amp;lt;String&amp;gt; USER_ID = new ThreadLocal&amp;lt;&amp;gt;(); @Test public void testThreadLocals() { USER_ID.</description>
    </item>
    
    <item>
      <title>Daily Reactive: Pagination</title>
      <link>https://bsideup.github.io/posts/daily_reactive/pagination/</link>
      <pubDate>Fri, 20 Dec 2019 14:50:02 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/daily_reactive/pagination/</guid>
      <description>This post is a part of the &amp;ldquo;Daily Reactive&amp;rdquo; series of short posts about common situations with Project Reactor and Reactive Programming.
 In one of the previous Daily Reactive posts we talked about the polling.
Today we will focus on an interesting example of the polling: Pagination.
Example Let&amp;rsquo;s say we have the following API:
interface Page extends Iterable&amp;lt;Item&amp;gt; { Optional&amp;lt;String&amp;gt; nextPageId(); } interface Client { CompletionStage&amp;lt;Page&amp;gt; fetchPage(@Nullable String pageId); } As you can see, each fetchPage will get a page (where pageId == null means &amp;ldquo;the first page&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>Daily Reactive: Splitting a stream</title>
      <link>https://bsideup.github.io/posts/daily_reactive/split/</link>
      <pubDate>Thu, 19 Dec 2019 15:18:57 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/daily_reactive/split/</guid>
      <description>This post is a part of the &amp;ldquo;Daily Reactive&amp;rdquo; series of short posts about common situations with Project Reactor and Reactive Programming.
 Although it is not common, sometimes there is a need to split a Flux into a few. And one has to be careful to do it correctly!
Let&amp;rsquo;s say we have a stream of persons and we want to return a Tuple of names and ids:</description>
    </item>
    
    <item>
      <title>Daily Reactive: Pollable sources</title>
      <link>https://bsideup.github.io/posts/daily_reactive/polling/</link>
      <pubDate>Tue, 10 Dec 2019 12:51:29 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/daily_reactive/polling/</guid>
      <description>This post is a part of the &amp;ldquo;Daily Reactive&amp;rdquo; series of short posts about common situations with Project Reactor and Reactive Programming.
 Although streaming sources are very efficient with Reactive Streams, there are still many poll-based APIs. Kafka/Pulsar, REST, SQS/PubSub&amp;hellip; You name it!
Let&amp;rsquo;s say we have the following blocking legacy API provided by the database:
// SDK-provided class class Client { public Item poll() { // ...  } } // and then: while (true) { var item = client.</description>
    </item>
    
    <item>
      <title>Daily Reactive: Where is my exception?!</title>
      <link>https://bsideup.github.io/posts/daily_reactive/where_is_my_exception/</link>
      <pubDate>Mon, 09 Dec 2019 14:42:17 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/daily_reactive/where_is_my_exception/</guid>
      <description>This post is a part of the &amp;ldquo;Daily Reactive&amp;rdquo; series of short posts about common situations with Project Reactor and Reactive Programming.
 Exceptions For Flow Contol? Throwing an error is a very easy way of terminating the processing. Consider the following example:
public Mono&amp;lt;Void&amp;gt; sendRequest() { return doSendAndReceiveResponse() .doOnNext(buffer -&amp;gt; { throw new StopProcessingException(buffer); }) .onErrorResume(StopProcessingException.class, e -&amp;gt; { ResourceUtils.releaseResource(e.getBuffer()); return Mono.empty(); }) .then(); } Here, if we receive a response from the call, we throw an error (to cancel the flow, because error is a terminating signal and it will cancel the processing), and later we handle the error with onErrorResume in which we release the buffer.</description>
    </item>
    
    <item>
      <title>Daily Reactive: Hello world!</title>
      <link>https://bsideup.github.io/posts/daily_reactive/hello_world/</link>
      <pubDate>Mon, 09 Dec 2019 13:42:17 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/daily_reactive/hello_world/</guid>
      <description>&amp;ldquo;Daily Reactive&amp;rdquo; is a series of posts about Reactive Programming and Project Reactor.
The posts are inspired by some real world situations observed in Project Reactor&amp;rsquo;s Gitter, or from working with the community, or even from the bug reports :)
Learn from others and avoid the most common pitfalls!
 ℹ️ You can subscribe to the &amp;ldquo;Daily Reactive&amp;rdquo; only by using this RSS link.
 </description>
    </item>
    
  </channel>
</rss>