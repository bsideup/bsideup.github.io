<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on A guy with &#39;Ego&#39; in his name</title>
    <link>https://bsideup.github.io/posts/</link>
    <description>Recent content in Posts on A guy with &#39;Ego&#39; in his name</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Nov 2019 08:13:08 +0100</lastBuildDate>
    
	<atom:link href="https://bsideup.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Zero-dependency Jackson entities with custom annotations</title>
      <link>https://bsideup.github.io/posts/custom_jackson_annotations/</link>
      <pubDate>Fri, 22 Nov 2019 08:13:08 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/custom_jackson_annotations/</guid>
      <description>Jackson is a great library for working with JSON.
However, it is a bit too heavyweight to have it as a public dependency of your API. Especially if you&amp;rsquo;re working on an Open Source library.
While refactoring docker-java, I got a challenge:
 There are two modules: api and core api module (unlike core) should not have any dependency core can be shaded, which means that we cannot use provided scope for Jackson&amp;rsquo;s annotations in api The entities in api have Jackson annotations like @JsonProperty, @JsonIgnore, @Creator and others Some entities require custom (de-)serialization  If not 4, everything would be so easy.</description>
    </item>
    
    <item>
      <title>Use Java 13 syntax in GraalVM with Jabel</title>
      <link>https://bsideup.github.io/posts/graalvm_with_jabel/</link>
      <pubDate>Wed, 04 Sep 2019 19:22:31 +0200</pubDate>
      
      <guid>https://bsideup.github.io/posts/graalvm_with_jabel/</guid>
      <description>GraalVM&amp;rsquo;s native-image is great, but (at least at the time this post was published) it only supports Java 8.
Since Java 8, we got new language features like var, switch expressions, Milling of Project Coin and others.
But, if we want to use these features, Java compiler leaves no option other than producing Java 12+ bytecode, even tho they don&amp;rsquo;t need it and can be compiled to Java 8.</description>
    </item>
    
    <item>
      <title>Re-running flaky tests in Gradle</title>
      <link>https://bsideup.github.io/posts/gradle_flaky_tests/</link>
      <pubDate>Tue, 09 Jul 2019 10:32:12 +0200</pubDate>
      
      <guid>https://bsideup.github.io/posts/gradle_flaky_tests/</guid>
      <description>The world is not perfect, so are the tests, and one day you will get&amp;hellip; a flaky test üò±
Flaky&amp;hellip; what? As per Neboj≈°a Striƒçeviƒá:
 An essential property of an automated test and the entire test suite is its determinism. This means that a test should always have the same result when the tested code doesn‚Äôt change. A test that fails randomly is commonly called a flaky test.</description>
    </item>
    
    <item>
      <title>Dependency Management in Gradle</title>
      <link>https://bsideup.github.io/posts/gradle_dependency_management/</link>
      <pubDate>Fri, 28 Jun 2019 14:02:22 +0200</pubDate>
      
      <guid>https://bsideup.github.io/posts/gradle_dependency_management/</guid>
      <description>There is one super popular thing I never did/do in my Gradle projects:
ext { lib_version = &amp;#34;1.2.3&amp;#34; } dependencies { compile &amp;#34;org.corp:lib:$lib_version&amp;#34; } Why not? I know that this approach was/is popular among Maven projects.
But I always preferred the dependencyManagement section of a parent POM because&amp;hellip; it is standartized.
When you switch between projects and want to change a version of dependency, you know where you look at.</description>
    </item>
    
    <item>
      <title>Detecting blocking calls in Akka with BlockHound</title>
      <link>https://bsideup.github.io/posts/blockhound_with_akka/</link>
      <pubDate>Tue, 28 May 2019 18:12:32 +0200</pubDate>
      
      <guid>https://bsideup.github.io/posts/blockhound_with_akka/</guid>
      <description>Asynchronous and non-blocking programming in JVM can provide very impressive performance results. Unlike the more classical blocking model, it runs on just a few threads from a pool. But, to keep it performant, you must ensure that you are not blocking these threads.
Just imagine having 4 threads in total, and blocking one of them for 100 milliseconds?
But how do you &amp;ldquo;protect&amp;rdquo; your application from the blocking calls?</description>
    </item>
    
    <item>
      <title>The sad state of extension methods in the JVM ecosystem</title>
      <link>https://bsideup.github.io/posts/jvm_extension_methods/</link>
      <pubDate>Tue, 07 May 2019 17:37:23 +0200</pubDate>
      
      <guid>https://bsideup.github.io/posts/jvm_extension_methods/</guid>
      <description>Most of my time I write Java code. It isn&amp;rsquo;t perfect, yet I find it good enough as my primary language. But sometimes I dream about the future of Java.
Given the latest activities around the Java language design (See Project Amber), the future looks brighter JEP-by-JEP, but one feature I really miss which isn&amp;rsquo;t discussed by Amber is&amp;hellip; Extension methods.
The problem Java language was heavily influenced by the OOP design.</description>
    </item>
    
    <item>
      <title>How to locally debug containers started by Testcontainers</title>
      <link>https://bsideup.github.io/posts/debugging_containers/</link>
      <pubDate>Mon, 08 Apr 2019 15:52:05 +0200</pubDate>
      
      <guid>https://bsideup.github.io/posts/debugging_containers/</guid>
      <description>One of the best things Docker gave us was the port randomization. You no longer have to care about possible conflicts, especially on CI environments.
But it also created a big confusion for many users who got used to Redis listening on port 6379, or the Java debugger on 5005. Many tools are not container aware and expect things on static ports.
Well, we can&amp;rsquo;t change the whole world (yet), but maybe there is something we can do for the Testcontainers users?</description>
    </item>
    
    <item>
      <title>The Builder pattern vs Java syntax</title>
      <link>https://bsideup.github.io/posts/builders_vs_java/</link>
      <pubDate>Thu, 31 Jan 2019 13:29:11 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/builders_vs_java/</guid>
      <description>The Builder pattern is one of the most popular patterns in Java.
It is simple, helps to keep objects immutable, and can be generated with tools like Project Lombok&amp;rsquo;s @Builder or Immutables, to name a few.
Example of a fluent variant of the pattern:
public class User { private final String firstName; private final String lastName; User(String firstName, String lastName) { this.firstName = firstName; this.lastName = lastName; } public static Builder builder() { return new Builder(); } public static class Builder { String firstName; String lastName; Builder firstName(String value) { this.</description>
    </item>
    
    <item>
      <title>My favourite GitHub bots</title>
      <link>https://bsideup.github.io/posts/github_bots/</link>
      <pubDate>Wed, 23 Jan 2019 13:58:43 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/github_bots/</guid>
      <description>Year 2018 was an eye-opening year for me as an OSS project maintainer. The reason is due to the emerge of GitHub bots.
Maintaining a project on GitHub could be a challenging task, especially when the project becomes popular. Issue management, releases, follow-ups, dependency management, oh my!
But, as most of the developers, we&amp;rsquo;re lazy enough and spend time automating things.
Dependabot https://github.com/apps/dependabot
There are many nice bots, but Dependabot is a real &amp;ldquo;Good Boy Bot&amp;rdquo;!</description>
    </item>
    
    <item>
      <title>Easy Java delegates with Lombok</title>
      <link>https://bsideup.github.io/posts/easy_java_delegates/</link>
      <pubDate>Fri, 04 Jan 2019 15:17:30 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/easy_java_delegates/</guid>
      <description>Ever wanted to override a method of an object instance in Java?
Let&amp;rsquo;s say you want to implement a custom Scheduler hook for Project Reactor. You start with Schedulers.addExecutorServiceDecorator, implement a BiFunction accepting Scheduler&amp;rsquo;s instance and ScheduledExecutorService and you need to return another ScheduledExecutorService instance where schedule* methods wrapped with your code.
A straightforward approach would be to create a new class, implement all methods of ScheduledExecutorService interface, and delegate most of them to the instance of ScheduledExecutorService we received as an argument.</description>
    </item>
    
    <item>
      <title>JNI cross-compilation with Docker</title>
      <link>https://bsideup.github.io/posts/jni-cross-compilation/</link>
      <pubDate>Wed, 26 Dec 2018 17:56:42 +0100</pubDate>
      
      <guid>https://bsideup.github.io/posts/jni-cross-compilation/</guid>
      <description>As a JVM guy, I got used to &amp;ldquo;write once, run everywhere&amp;rdquo; paradigm. But recently I got an interesting challenge to solve.
I was working on a debugging tool for Project Reactor and part of it is implemented as a native library for Java, using JNI technology.
I did some C++ in the past but never thought how hard is it, to cross-compile a library for 3 major platforms (Windows, Linux and Mac), both locally and on CI environment (from where we perform the releases).</description>
    </item>
    
  </channel>
</rss>